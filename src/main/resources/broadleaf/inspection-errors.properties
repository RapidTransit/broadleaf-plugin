# Entity, because the AdminPresentation Expects Certain Things, Like Hibernate uses a disassebled state (fancy talk for an
# Object[] Array) to save the entity the presentation framework casts to Serializable
admin.id.composite = Id Can not be composite
admin.id.type = Id Can Only be an Integer or Long
admin.id.name = Id field Should have a name of 'id'
admin.serializable = Admin Presentation Expects all Entities to be Serializable

#AdminPresentation, Validate Supported Field Types
admin.presentation.supported-field-type.boolean = Supported Field Type is not a Boolean Type
admin.presentation.supported-field-type.broadleaf-enumeration.string = A Broadleaf Enumeration needs to be a String type
admin.presentation.supported-field-type.broadleaf-enumeration.type = Enumeration Class does not implement BroadleafEnumerationType
admin.presentation.supported-field-type.decimal = Decimal must be a BigDecimal, Float or Double
admin.presentation.supported-field-type.integer = Integer type must be a Long/Integer
admin.presentation.supported-field-type.money = Money type needs a BigDecimal field
admin.presentation.supported-field-type.date = Date must be of java.util.Date
admin.presentation.supported-field-type.string = String type must be a String
admin.presentation.supported-field-type.password = Password must be a String
admin.presentation.supported-field-type.password-confirm = Password Comfirm must be a String Type
admin.presentation.supported-field-type.email = Email Must be a String Type
admin.presentation.supported-field-type.html.type = Html type should be a String
admin.presentation.supported-field-type.html.lob = HTML should have a @Lob Annotation
admin.presentation.supported-field-type.html.user-type = HTML Should have a User Type of StringClobType
admin.presentation.supported-field-type.html-basic.type = Html type should be a String
admin.presentation.supported-field-type.html-basic.lob = HTML should have a @Lob Annotation
admin.presentation.supported-field-type.html-basic.user-type = HTML Should have a User Type of StringClobType
admin.presentation.supported-field-type.description.type = Description type should be a String
admin.presentation.supported-field-type.description.lob = Description should have a @Lob Annotation
admin.presentation.supported-field-type.description.user-type = Description Should have a User Type of StringClobType


admin.mismatch.presentation = @AdminPresentation can only be used with simple types, or a managed type if @AdminPresentationToOneLookUp is also present
admin.mismatch.collection = @AdminPresentationCollection can only be used on a Collection Type
admin.mismatch.adorned = @AdminPresentationAdornedTargetCollection can only be used on a Collection Type
admin.mismatch.map = @AdminPresentationMap can only be used on a map type
admin.mismatch.to-one-lookup = @AdminPresentationToOneLookUp must be a managed type

#To One
admin.to-one.collection = To One Lookup can not be a Collection or Map
admin.to-one.managed= @AdminPresentationToOneLookUp must be a managed type
admin.to-one.name-property.none = There is no name property on the referenced entity, please enter an explicit field name
admin.to-one.name-property.simple = There property on the referenced entity is not a simple type
admin.to-one.name-property.override.none = There is property on the referenced entity
admin.to-one.name-property.override.simple = There property on the referenced entity is not a simple type

# Adorned
admin.adorned.header-field.type = Header Field must reference a JDK Number, Date, or String


#Validate Misc Stuff
admin.presentation.group = Admin Presentation Group was not explicitly defined
admin.presentation.field-group = Admin Presentation Field Group was not explicitly defined
admin.presentation.field-order = Field has the same Order as another field in the group


#Threading
threading.thread-local.explicit = Explicit Thread Local used, Use ThreadLocalManager as it clears after each request
threading.thread-local-manager.concrete = ThreadLocalManager#create(Class) needs a Concrete Class with a no-arg constructor, use ThreadLocalManager#create(Class, false) \
and add your own initializer
threading.customer-state.outside-thread= CustomerState.getCustomer() called within a Callable/@Async/Runnable/Thread
threading.cart-state.outside-thread= CartState.getCart() called within a Callable/@Async/Runnable/Thread



