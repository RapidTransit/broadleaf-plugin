import com.google.common.base.CaseFormat
import org.broadleafcommerce.common.presentation.AdminGroupPresentation
import org.broadleafcommerce.common.presentation.AdminPresentation
import org.broadleafcommerce.common.presentation.AdminPresentationAdornedTargetCollection
import org.broadleafcommerce.common.presentation.AdminPresentationClass
import org.broadleafcommerce.common.presentation.AdminPresentationCollection
import org.broadleafcommerce.common.presentation.AdminPresentationDataDrivenEnumeration
import org.broadleafcommerce.common.presentation.AdminPresentationMap
import org.broadleafcommerce.common.presentation.AdminPresentationMapField
import org.broadleafcommerce.common.presentation.AdminPresentationMapFields
import org.broadleafcommerce.common.presentation.AdminPresentationMapKey
import org.broadleafcommerce.common.presentation.AdminPresentationOperationTypes
import org.broadleafcommerce.common.presentation.AdminPresentationToOneLookup
import org.broadleafcommerce.common.presentation.AdminTabPresentation
import org.broadleafcommerce.common.presentation.ConfigurationItem
import org.broadleafcommerce.common.presentation.FieldValueConfiguration
import org.broadleafcommerce.common.presentation.OptionFilterParam
import org.broadleafcommerce.common.presentation.ValidationConfiguration
import org.broadleafcommerce.common.presentation.override.AdminGroupPresentationOverride
import org.broadleafcommerce.common.presentation.override.AdminPresentationAdornedTargetCollectionOverride
import org.broadleafcommerce.common.presentation.override.AdminPresentationCollectionOverride
import org.broadleafcommerce.common.presentation.override.AdminPresentationDataDrivenEnumerationOverride
import org.broadleafcommerce.common.presentation.override.AdminPresentationMapOverride
import org.broadleafcommerce.common.presentation.override.AdminPresentationMergeEntry
import org.broadleafcommerce.common.presentation.override.AdminPresentationMergeOverride
import org.broadleafcommerce.common.presentation.override.AdminPresentationMergeOverrides
import org.broadleafcommerce.common.presentation.override.AdminPresentationOverride
import org.broadleafcommerce.common.presentation.override.AdminPresentationOverrides
import org.broadleafcommerce.common.presentation.override.AdminPresentationToOneLookupOverride
import org.broadleafcommerce.common.presentation.override.AdminTabPresentationOverride

import java.lang.annotation.Annotation

import static org.apache.commons.lang.StringUtils.repeat

buildscript {

    repositories {
        mavenCentral()
        maven {
            url 'http://nexus.broadleafcommerce.org/nexus/content/groups/community-snapshots/'
        }
        maven {
            url 'http://nexus.broadleafcommerce.org/nexus/content/groups/community-releases/'
        }
    }
    dependencies {
        classpath group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'
        classpath group: 'org.broadleafcommerce', name: 'broadleaf-framework', version: '5.2.0-GA'
        classpath group: 'org.broadleafcommerce', name: 'broadleaf-common', version: '5.2.0-GA'
        classpath group: 'org.broadleafcommerce', name: 'broadleaf-open-admin-platform', version: '5.2.0-GA'
        classpath group: 'org.broadleafcommerce', name: 'broadleaf-framework-web', version: '5.2.0-GA'
        classpath group: 'com.google.guava', name: 'guava', version: '23.0'
        classpath group: 'org.apache.commons', name: 'commons-lang3', version: '3.6'

    }
}



task GenerateAnnotationHandlers {
    doLast {
        StringBuilder.metaClass.repeat = { int count ->
            delegate.append(repeat("    ", count))
        }
        def generateSingular = { String name, String returnType, String key, String calls ->
"""
    fun ${name}(): Pair<PsiElement, ${returnType}>? {
        return annotation.cacheGet(${key}_KEY, { resolveDeclared${calls}(${key}) })
    }
    
    fun _${name}(): Pair<PsiElement, ${returnType}>? {
        return annotation.cacheGet(${key}_KEY, { resolve${calls}(${key}) })
    }
"""
        }
        def generateArray = { String name, String returnType, String key, String calls ->
"""
    fun ${name}(): List<Pair<PsiElement, ${returnType}>> {
        return annotation.cacheGet(${key}_KEY, { resolveDeclared${calls}Array(${key}) })
    }
    
    fun _${name}(): List<Pair<PsiElement, ${returnType}>> {
        return annotation.cacheGet(${key}_KEY, { resolve${calls}Array(${key}) })
    }
"""
        }
        //noinspection GroovyAssignabilityCheck
        List<Class> classes = [
                AdminGroupPresentation,
                AdminPresentation,
                AdminPresentationAdornedTargetCollection,
                AdminPresentationClass,
                AdminPresentationCollection,
                AdminPresentationDataDrivenEnumeration,
                AdminPresentationMap,
                AdminPresentationMapField,
                AdminPresentationMapFields,
                AdminPresentationMapKey,
                AdminPresentationOperationTypes,
                AdminPresentationToOneLookup,
                AdminTabPresentation,
                ConfigurationItem,
                FieldValueConfiguration,
                OptionFilterParam,
                ValidationConfiguration,
                AdminGroupPresentationOverride,
                AdminPresentationAdornedTargetCollectionOverride,
                AdminPresentationCollectionOverride,
                AdminPresentationDataDrivenEnumerationOverride,
                AdminPresentationMapOverride,
                AdminPresentationMergeEntry,
                AdminPresentationMergeOverride,
                AdminPresentationMergeOverrides,
                AdminPresentationOverride,
                AdminPresentationOverrides,
                AdminPresentationToOneLookupOverride,
                AdminTabPresentationOverride
        ]
                classes.each {

            StringBuilder sb = new StringBuilder()
            List<String> methodDefs = new ArrayList<>()
            List<String> keys = new ArrayList<>()
            List<String> mapKeys = new ArrayList<>()
            List<String> invokers = new ArrayList<>()
            sb.append("package com.pss.broadleaf.plugin.annotations\n\n")
            sb.append("import com.intellij.openapi.util.Key\n")
            sb.append("import com.intellij.psi.PsiAnnotation\n")
            sb.append("import com.intellij.psi.PsiClass\n")
            sb.append("import com.intellij.psi.PsiField\n")
            sb.append("import com.pss.broadleaf.plugin.cacheGet\n")
            sb.append("import com.intellij.psi.PsiElement\n\n")
            String name = it.simpleName + "Wrapper"

            sb.append("class ${it.simpleName}Wrapper(annotation: PsiAnnotation) : AnnotationWrapper(annotation) {\n\n")

            sb.repeat(1).append("companion object {\n")
            sb.repeat(2).append("""val CLASS_NAME = "${it.name}"\n""")
            sb.repeat(2).append("""val CLASS_NAME_SET = setOf("${it.name}")\n""")


            it.declaredMethods.sort{it.name}.each{
                def screamingSnake = CaseFormat.LOWER_CAMEL.to(CaseFormat.UPPER_UNDERSCORE, it.name)
                sb.repeat(2).append("""val ${screamingSnake} = "${it.name}" """).append('\n')
                switch(it.returnType){
                    case String:
                        mapKeys.add("Pair(\"${it.name}\", String::class.java)")
                        keys.add("""val ${screamingSnake}_KEY = Key<Pair<PsiElement, String>?>("@${it.name}")\n""")
                        methodDefs.add(generateSingular(it.name, "String", screamingSnake,  "String"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case String[]:
                        mapKeys.add("Pair(\"${it.name}\", Array<String>::class.java)")
                        keys.add("""val ${screamingSnake}_KEY = Key<List<Pair<PsiElement, String>>>("@${it.name}")\n""")
                        methodDefs.add(generateArray(it.name, "String", screamingSnake, "String"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case float:
                        mapKeys.add("Pair(\"${it.name}\", Float::class.javaPrimitiveType!!)")
                        keys.add("""val ${screamingSnake}_KEY = Key<Pair<PsiElement, Float>?>("@${it.name}")\n""")
                        methodDefs.add(generateSingular(it.name, "Float", screamingSnake,  "Float"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case float[]:
                        mapKeys.add("Pair(\"${it.name}\", Array<Float>::class.javaPrimitiveType!!)")
                        keys.add("""val ${screamingSnake}_KEY = Key<List<Pair<PsiElement, Float>>>("@${it.name}")\n""")
                        methodDefs.add(generateArray(it.name, "Float", screamingSnake, "Float"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case long:
                        mapKeys.add("Pair(\"${it.name}\", Long::class.javaPrimitiveType!!)")
                        keys.add("""val ${screamingSnake}_KEY = Key<Pair<PsiElement, Long>?>("@${it.name}")\n""")
                        methodDefs.add(generateSingular(it.name, "Long", screamingSnake,  "Long"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case long[]:
                        mapKeys.add("Pair(\"${it.name}\", Array<Long>::class.javaPrimitiveType!!)")
                        keys.add("""val ${screamingSnake}_KEY = Key<List<Pair<PsiElement, Long>>>("@${it.name}")\n""")
                        methodDefs.add(generateArray(it.name, "Long", screamingSnake, "Long"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case double :
                        mapKeys.add("Pair(\"${it.name}\", Double::class.javaPrimitiveType!!)")
                        keys.add("""val ${screamingSnake}_KEY = Key<Pair<PsiElement, Double>?>("@${it.name}")\n""")
                        methodDefs.add(generateSingular(it.name, "Double", screamingSnake,  "Double"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case double[]:
                        mapKeys.add("Pair(\"${it.name}\", Array<Double>::class.javaPrimitiveType!!)")
                        keys.add("""val ${screamingSnake}_KEY = Key<List<Pair<PsiElement, Double>>>("@${it.name}")\n""")
                        methodDefs.add(generateArray(it.name, "Double", screamingSnake, "Double"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case int:
                        mapKeys.add("Pair(\"${it.name}\", Int::class.javaPrimitiveType!!)")
                        keys.add("""val ${screamingSnake}_KEY = Key<Pair<PsiElement, Int>?>("@${it.name}")\n""")
                        methodDefs.add(generateSingular(it.name, "Int", screamingSnake,  "Int"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case int[]:
                        mapKeys.add("Pair(\"${it.name}\", Array<Int>::class.javaPrimitiveType!!)")
                        keys.add("""val ${screamingSnake}_KEY = Key<List<Pair<PsiElement, Int>>>("@${it.name}")\n""")
                        methodDefs.add(generateArray(it.name, "Int", screamingSnake, "Int"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case boolean:
                        mapKeys.add("Pair(\"${it.name}\", Boolean::class.javaPrimitiveType!!)")
                        keys.add("""val ${screamingSnake}_KEY = Key<Pair<PsiElement, Boolean>?>("@${it.name}")\n""")
                        methodDefs.add(generateSingular(it.name, "Boolean", screamingSnake, "Boolean"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case boolean[]:
                        mapKeys.add("Pair(\"${it.name}\", Array<Boolean>::class.javaPrimitiveType!!)")
                        keys.add("""val ${screamingSnake}_KEY = Key<List<Pair<PsiElement, Boolean>>>("@${it.name}")\n""")
                        methodDefs.add(generateArray(it.name, "Boolean", screamingSnake, "Boolean"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case Enum:
                        mapKeys.add("Pair(\"${it.name}\", Enum::class.java)")
                        keys.add("""val ${screamingSnake}_KEY = Key<Pair<PsiElement, PsiField>?>("@${it.name}")\n""")
                        methodDefs.add(generateSingular(it.name, "PsiField", screamingSnake, "Enum"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case Enum[]:
                        mapKeys.add("Pair(\"${it.name}\", Array<Enum>::class.java)")
                        keys.add("""val ${screamingSnake}_KEY = Key<List<Pair<PsiElement, PsiField>>>("@${it.name}")\n""")
                        methodDefs.add(generateArray(it.name, "PsiField", screamingSnake, "Enum"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case Class:
                        mapKeys.add("Pair(\"${it.name}\", Class::class.java)")
                        keys.add("""val ${screamingSnake}_KEY = Key<Pair<PsiElement, PsiClass>?>("@${it.name}")\n""")
                        methodDefs.add(generateSingular(it.name, "PsiClass", screamingSnake, "Class"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case Class[]:
                        mapKeys.add("Pair(\"${it.name})\", Array<Class>::class.java)")
                        keys.add("""val ${screamingSnake}_KEY = Key<List<Pair<PsiElement, PsiClass>>>("@${it.name}")\n""")
                        methodDefs.add(generateArray(it.name, "PsiClass", screamingSnake, "Class"))
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        break
                    case Annotation:
                        mapKeys.add("Pair(\"${it.name})\", Annotation::class.java)")
                        keys.add("""val ${screamingSnake}_KEY = Key<PsiAnnotation?>("@${it.name}")\n""")
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        methodDefs.add(
"""
    fun ${it.name}(): ${it.returnType.simpleName}Wrapper? {
        val anno = annotation.cacheGet(${screamingSnake}_KEY, { resolveDeclaredAnnotation(${screamingSnake}) })
        if(anno != null){
            return ${it.returnType.simpleName}Wrapper(anno)
        }
        return null
    }
    
    fun _${it.name}(): ${it.returnType.simpleName}Wrapper? {
        val anno =  annotation.cacheGet(${screamingSnake}_KEY, { resolveAnnotation(${screamingSnake}) })
        if(anno != null){
            return ${it.returnType.simpleName}Wrapper(anno)
        }
        return null
    }
"""
                        )
                        break
                    case Annotation[]:
                        mapKeys.add("Pair(\"${it.name})\", Array<Annotation>::class.java)")
                        keys.add("""val ${screamingSnake}_KEY = Key<List<PsiAnnotation>?>("@${it.name}")\n""")
                        invokers.add("""Pair("${it.name}", {wrapper-> wrapper.${it.name}() }) """)
                        methodDefs.add(
                                """
    fun ${it.name}(): List<${it.returnType.componentType.simpleName}Wrapper> {
        val anno = annotation.cacheGet(${screamingSnake}_KEY, { resolveDeclaredAnnotationArray(${screamingSnake}) })
        if(anno != null){
            return anno.map{ ${it.returnType.componentType.simpleName}Wrapper(it) }
        }
        return emptyList<${it.returnType.componentType.simpleName}Wrapper>()
    }
    
    fun _${it.name}(): List<${it.returnType.componentType.simpleName}Wrapper> {
        val anno =  annotation.cacheGet(${screamingSnake}_KEY, { resolveAnnotationArray(${screamingSnake}) })
        if(anno != null){
            return anno.map{ ${it.returnType.componentType.simpleName}Wrapper(it) }
        }
        return emptyList<${it.returnType.componentType.simpleName}Wrapper>()
    }
"""
                        )
                        break
                }
            }
            sb.append('\n')
            sb.repeat(2).append("""val INVOKERS = mapOf<String, (${name})->Any?>(${invokers.join(", ")})\n""")
            sb.repeat(2).append("""val METHODS = mapOf<String, Class<out Any>>(${mapKeys.join(", ")})\n""")
            keys.each {
                sb.repeat(2).append(it)
            }
            sb.repeat(1).append("}\n\n")
sb.append("""
    override fun getMethods(): Map<String, Class<out Any>> {
        return METHODS
    }
""")
            methodDefs.each {
                sb.append(it)
            }
            sb.append("\n}")
            new File(sourceSets.main.kotlin.srcDirs[0], "com/pss/broadleaf/plugin/annotations/${it.simpleName}Wrapper.kt").write(sb.toString())
            new File(sourceSets.main.kotlin.srcDirs[0], "com/pss/broadleaf/plugin/annotations/AnnotationFactory.kt").write(
"""
package com.pss.broadleaf.plugin.annotations

import com.intellij.psi.PsiAnnotation

object AnnotationFactory {

    private val MAP_FACTORY: MutableMap<String, (PsiAnnotation)-> AnnotationWrapper> = mutableMapOf()

    init {
        ${classes.collect{"MAP_FACTORY.put(\"${it.name}\", {annotation-> ${it.simpleName}Wrapper(annotation)})"}.join("\n        ")}
    }

    fun getFactory(): Map<String, (PsiAnnotation)-> AnnotationWrapper> {
        return MAP_FACTORY
    }

}
"""
            )


        }
    }
}